[tool.poetry]
name = "cumplo-common"
version = "1.3.2"
description = "A one-stop library that centralizes the core logic and protects the domain of the Cumplo API project"
authors = ["Cristobal Sfeir <hello@crisotbalsfeir.com>"]
packages = [{ include = "cumplo_common" }]

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.1.1"
arrow = "^1.2.3"
firebase-admin = "^6.2.0"
babel = "^2.12.1"
python-dotenv = "^1.0.0"
google-cloud-tasks = "^2.14.1"
types-protobuf = "^4.23.0.2"
fastapi = "^0.109.1"
ulid-py = "^1.1.0"
google-cloud-pubsub = "^2.18.4"

[tool.poetry.dev-dependencies]
pytest = "^8.3.2"
ruff = "^0.7.1"
mypy = "^1.13.0"
keyring = "^25.2.1"
keyrings-google-artifactregistry-auth = "^1.1.2"
twine = "^5.1.1"
docformatter = "^1.7.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
exclude = ".venv"

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "pydantic.*",
    "psycopg2.*",
    "lxml.*",
    "babel.*",
    "bs4.*",
    "functions_framework.*",
    "firebase_admin.*",
    "retry.*",
    "starlette.*",
    "google.cloud.pubsub.*",
    "numpy_financial.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
target-version = "py312"
preview = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in method
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "D100",   # Missing docstring in public module
    "D107",   # Missing docstring in __init__
    "D105",   # Missing docstring in magic method
    "D212",   # Multi-line docstring summary should start at the second line
    "D203",   # One blank line required before class docstring
    "D101",   # Missing docstring in public class
    "D104",   # Missing docstring in public package
    "G004",   # Logging statement uses string formatting
    "S113",   # Use of `requests` call without timeout
    "DOC201", # Missing documentation for `return` in docstring
    "COM812", # Missing trailing comma in a dictionary
    "ISC001", # Implicit string concatenation
    "CPY001", # Copying notice
    # =====
    "PT011",  # ValueError is too broad, set the `match` parameter
    "PT013",  # Incorrect import of `pytest`; use `import pytest` instead
    "FBT003", # Boolean positional value in function call
    "D102",   # Missing docstring in public method
    "EM101",  # Exception must not use a string literal, assign to variable first
    "DOC501", # Raised exception `ValueError` missing from docstring
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM102",  # Exception must not use an f-string literal, assign to variable first
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR6301"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.docformatter]
pre-summary-newline = true # Ensures that multiline docstrings start on a new line.
wrap-descriptions = 120    # Wraps descriptions at 114 characters, ensuring consistent line width.
wrap-summaries = 120       # Wraps summary lines only if they exceed 114 characters.
recursive = true           # Recursively formats all Python files in the specified directories.
blank = true               # Adds a blank line before the end of multiline docstrings.
